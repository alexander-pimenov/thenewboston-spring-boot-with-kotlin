Шаблон: Стратегия (Strategy)
=======================================================================================================
Цель:

Взаимозаменяемость семейства классов

Это поведенческий паттерн проектирования, который определяет семейство схожих алгоритмов
и помещает каждый из них в собственный класс, после чего алгоритмы можно взаимозаменять
прямо во время исполнения программы.

Паттерн Стратегия предлагает определить семейство схожих алгоритмов, которые часто изменяются
или расширяются, и вынести их в собственные классы, называемые стратегиями.

Важно, чтобы все стратегии имели общий интерфейс.
Используя этот интерфейс, контекст будет независимым от конкретных классов стратегий.
С другой стороны, вы сможете изменять и добавлять новые виды алгоритмов, не трогая код контекста.

=======================================================================================================

Для чего используется:

Опредление семейства классов, инкапсулирование каждого из них и организация
их взаимозаменяемости.

=======================================================================================================
Пример использования:

- есть несколько родственных классов, которые отличаются поведением;
- необходимо иметь несколько вариантов поведения;
- в классе есть данные, о которых не должен знать клиент;
- с помощью условных операторов в классе определено большое количество возможных поведений.

=======================================================================================================

Стратегия позволяет изолировать код, данные и зависимости алгоритмов от других объектов,
скрыв эти детали внутри классов-стратегий.

В отличие от паттерна State (Состояние) активность в Стратегии мы устанавливаем (изменяем) налету,
прямо в клиентском коде. а в Состоянии это происходило в классе Контекста, в методе changeActivity().
Состояние можно рассматривать как надстройку над Стратегией.
Оба паттерна используют композицию, чтобы менять поведение основного объекта, делегируя работу
вложенным объектам-помощникам.
Однако в Стратегии эти объекты не знают друг о друге и никак не связаны.
В Состоянии сами конкретные состояния могут переключать контекст.

=======================================================================================================

Преимущества:
  Горячая замена алгоритмов на лету.
  Изолирует код и данные алгоритмов от остальных классов.
  Уход от наследования к делегированию. Принцип «композиции», т.е. делегирования работы другим объектам.
  Реализует принцип открытости/закрытости.

Недостатки:
  Усложняет программу за счёт дополнительных классов.
  Клиент должен знать, в чём состоит разница между стратегиями, чтобы выбрать подходящую.

=======================================================================================================


